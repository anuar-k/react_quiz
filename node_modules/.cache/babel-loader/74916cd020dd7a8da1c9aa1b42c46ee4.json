{"ast":null,"code":"var _jsxFileName = \"C:\\\\js_project\\\\react-quiz\\\\src\\\\containers\\\\Quiz\\\\Quiz.js\";\nimport React, { Component } from \"react\";\nimport classes from './Quiz.module.css';\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\nimport FinishedQuiz from \"../../components/FinisheQuiz/FinishedQuiz\";\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      result: {},\n      isFinished: true,\n      activeQuestion: 0,\n      answerState: null,\n      quiz: [{\n        question: 'Какого цвета небо',\n        rightAnswerId: 1,\n        id: 1,\n        answers: [{\n          text: 'Черный',\n          id: 1\n        }, {\n          text: 'Красный',\n          id: 2\n        }, {\n          text: 'Синий',\n          id: 3\n        }, {\n          text: 'Зеленый',\n          id: 4\n        }]\n      }, {\n        question: 'В каком году основал Астану',\n        rightAnswerId: 2,\n        id: 2,\n        answers: [{\n          text: '1700',\n          id: 1\n        }, {\n          text: '1456',\n          id: 2\n        }, {\n          text: '1909',\n          id: 3\n        }, {\n          text: '2010',\n          id: 4\n        }]\n      }]\n    };\n\n    this.onAnswerClickHandler = answerId => {\n      console.log('Answer id: ', answerId);\n      const question = this.state.quiz[this.state.activeQuestion];\n      const results = this.state.result;\n\n      if (question.rightAnswerId === answerId) {\n        const timeout = window.setTimeout(() => {\n          window.clearTimeout(timeout);\n        }, 1000);\n\n        if (this.isQuizFinished()) {\n          this.setState({\n            isFinished: true\n          });\n        } else {\n          this.setState({\n            activeQuestion: this.state.activeQuestion + 1\n          });\n        }\n      } else {\n        results[answerId] = 'error';\n        this.setState({\n          answerState: {\n            [answerId]: 'error'\n          }\n        });\n      }\n    };\n  }\n\n  isQuizFinished() {\n    return this.state.activeQuestion + 1 === this.state.quiz.length;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Quiz,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.QuizWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u044C\\u0442\\u0435 \\u043D\\u0430 \\u0432\\u0441\\u0435 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B\"), this.state.isFinished ? /*#__PURE__*/React.createElement(FinishedQuiz, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }\n    }) : /*#__PURE__*/React.createElement(ActiveQuiz, {\n      answers: this.state.quiz[0].answers,\n      question: this.state.quiz[this.state.activeQuestion].question,\n      onAnswerClick: this.onAnswerClickHandler,\n      quizLength: this.state.quiz.length,\n      answerNumber: this.state.activeQuestion + 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 31\n      }\n    })));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["C:/js_project/react-quiz/src/containers/Quiz/Quiz.js"],"names":["React","Component","classes","ActiveQuiz","FinishedQuiz","Quiz","state","result","isFinished","activeQuestion","answerState","quiz","question","rightAnswerId","id","answers","text","onAnswerClickHandler","answerId","console","log","results","timeout","window","setTimeout","clearTimeout","isQuizFinished","setState","length","render","QuizWrapper"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport classes from './Quiz.module.css'\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\nimport FinishedQuiz from \"../../components/FinisheQuiz/FinishedQuiz\";\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        result: {},\r\n        isFinished: true,\r\n        activeQuestion: 0,\r\n        answerState: null,\r\n        quiz: [\r\n            {\r\n                question: 'Какого цвета небо',\r\n                rightAnswerId: 1,\r\n                id: 1,\r\n                answers: [\r\n                    {text: 'Черный', id: 1},\r\n                    {text: 'Красный', id: 2},\r\n                    {text: 'Синий', id: 3},\r\n                    {text: 'Зеленый', id: 4},\r\n                ]\r\n            },\r\n            {\r\n                question: 'В каком году основал Астану',\r\n                rightAnswerId: 2,\r\n                id: 2,\r\n                answers: [\r\n                    {text: '1700', id: 1},\r\n                    {text: '1456', id: 2},\r\n                    {text: '1909', id: 3},\r\n                    {text: '2010', id: 4},\r\n                ]\r\n            },\r\n        ]\r\n    }\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n        console.log('Answer id: ', answerId)\r\n        const question = this.state.quiz[this.state.activeQuestion];\r\n        const results = this.state.result\r\n\r\n\r\n        if (question.rightAnswerId === answerId) {\r\n            const timeout = window.setTimeout(() => {\r\n                window.clearTimeout(timeout)\r\n            }, 1000)\r\n\r\n            if (this.isQuizFinished()) {\r\n                this.setState({\r\n                    isFinished: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    activeQuestion: this.state.activeQuestion + 1\r\n                })\r\n            }\r\n        } else {\r\n            results[answerId] ='error'\r\n            this.setState({\r\n                answerState: {[answerId] : 'error'}\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    isQuizFinished() {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n                    <h1>Ответьте на все вопросы</h1>\r\n                    {\r\n                        this.state.isFinished\r\n                            ? <FinishedQuiz/>\r\n                            : <ActiveQuiz\r\n                                answers={this.state.quiz[0].answers}\r\n                                question={this.state.quiz[this.state.activeQuestion].question}\r\n                                onAnswerClick={this.onAnswerClickHandler}\r\n                                quizLength={this.state.quiz.length}\r\n                                answerNumber={this.state.activeQuestion + 1}\r\n                            />\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}